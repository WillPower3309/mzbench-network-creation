# coding=utf-8

#   ███╗   ███╗ ██████╗  ██████╗██╗  ██╗    ██╗  ██╗██╗███████╗████████╗ ██████╗ ██████╗ ██╗   ██╗
#   ████╗ ████║██╔═══██╗██╔════╝██║ ██╔╝    ██║  ██║██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗╚██╗ ██╔╝
#   ██╔████╔██║██║   ██║██║     █████╔╝     ███████║██║███████╗   ██║   ██║   ██║██████╔╝ ╚████╔╝
#   ██║╚██╔╝██║██║   ██║██║     ██╔═██╗     ██╔══██║██║╚════██║   ██║   ██║   ██║██╔══██╗  ╚██╔╝
#   ██║ ╚═╝ ██║╚██████╔╝╚██████╗██║  ██╗    ██║  ██║██║███████║   ██║   ╚██████╔╝██║  ██║   ██║
#   ╚═╝     ╚═╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚═╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝


####################################
# Imports
####################################


from time import time
import random
from .mqtt_client import MqttClient


####################################
# Function Declarations
####################################


def generate_history(domain, network_model):
    # Mock motion history
    kai = []
    ts = time() - 300  # Start time 5 minutes in the past
    counter = 60

    report_data = {
        "count": 60, 
        "motion": {
            "lraw": [0.0, 0.01], 
            "throughput": [0.99, 1.0, 1.0, 0.98, 0.98, 1.0, 0.99, 0.99, 0.99, 0.98, 0.99, 0.99, 1.0, 0.99, 0.99, 0.99, 0.99, 0.98, 0.99, 0.99, 0.99, 1.0, 1.0, 0.99, 1.0, 0.98, 0.99, 0.98, 0.98, 0.99, 0.99, 0.99, 0.99, 0.98, 0.98, 0.99, 1.0, 0.99, 0.99, 0.99, 0.99, 0.99, 0.98, 1.0, 0.99, 0.99, 0.99, 0.99, 1.0, 0.99, 0.98, 0.99, 1.0, 0.98, 0.99, 0.99, 0.99, 0.98, 0.99, 0.99], 
            "mkai": [],
            "mconf": [84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 84.85, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71, 169.71], 
            "msad": [11.96, 7.79, 0.75, 12.48, 15.39, 13.75, 9.27, 22.2, 6.16, -7.02, -7.17, -5.41, -3.36, -1.14, -1.0, -0.55, -1.23, -0.51, -2.15, -0.11, 0.86, 0.91, -0.12, 0.27, 0.46, -0.99, -0.07, 1.19, -0.09, 1.65, 1.07, 2.13, 1.8, 2.4, 2.58, 1.7, 2.49, 2.36, 2.5, 2.81, 0.55, -0.05, 0.02, -1.17, 0.96, 0.4, 0.06, -0.65, 0.36, 1.42, 0.91, 1.12, 2.29, 1.17, 1.3, 1.64, 1.31, 0.49, -0.26, 0.92]
        }, 
        "interval": 5000, 
        "location": {
            "macs": [], 
            "density": [
                [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []
            ]
        }, 
        "ts": 0
    }

    while counter > 0:
        kai.extend([random.random()])
        report_data["motion"]["mkai"] = kai
        report_data["ts"] = ts + 5
        counter -= 1

    # Establish connection to MQTT, send data to topic, and disconnect
    mqtt_server = "mqtt.%s" % domain
    message_queue = MqttClient()
    message_queue.open(
        mqtt_server,
        1883,
        network_model.guardian_id,
        network_model.mqtt_creds[0],
        network_model.mqtt_creds[1]
    )
    
    message_queue.publish(
        network_model.guardian_type, network_model.guardian_id, "motion-history", report_data
    )
    message_queue.close()
